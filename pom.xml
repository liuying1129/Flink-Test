<project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
  http://maven.apache.org/POM/4.0.0 
  http://maven.apache.org/xsd/maven-4.0.0.xsd">
  
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.yklis</groupId>
	<artifactId>FlinkTest</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<!-- 定义变量 -->
    <properties>
        <flink.version>1.3.2</flink.version>
        <flink.groupId>org.apache.flink</flink.groupId>
    </properties>
    
	<dependencies>		
        <dependency>
		    <groupId>${flink.groupId}</groupId>
		    <artifactId>flink-java</artifactId>
		    <version>${flink.version}</version>
		</dependency>	
        		
		<!-- 根据kafka的版本更改artifactId后缀.如Scala 2.10、Scala 2.11 -->
		<!-- 否则运行报错:java.lang.NoClassDefFoundError: Could not initialize class kafka.consumer.FetchRequestAndResponseStatsRegistry -->
		<dependency>
		    <groupId>${flink.groupId}</groupId>
		    <artifactId>flink-streaming-java_2.10</artifactId>
		    <version>${flink.version}</version>
		</dependency>
        
		<dependency>
		    <groupId>${flink.groupId}</groupId>
		    <artifactId>flink-clients_2.10</artifactId>
		    <version>${flink.version}</version>
		</dependency>
		
		<dependency>
		    <groupId>${flink.groupId}</groupId>
		    <artifactId>flink-connector-kafka-0.8_2.10</artifactId>
		    <version>${flink.version}</version>
		</dependency>
		
		<!-- kafka原生客户端 -->
		<dependency>
		    <groupId>org.apache.kafka</groupId>
		    <!-- kafka-clients -->
		    <artifactId>kafka_2.10</artifactId>
		    <version>0.8.2.2</version>
		</dependency>
		
		<dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java</artifactId>
            <version>3.1.0</version>
        </dependency>                								
	</dependencies>
        
	<build> 
	    <!-- 如果不定义finalName，则生成的包名是artifactId-version.war -->
	    <!-- 定义finalName，则生成的包名是finalName.war -->
	    <finalName>FlinkTest</finalName>
	    
	    <plugins>
	        <!-- 解决maven编译时“source-1.5 中不支持 diamond 运算符”的问题 -->
	        <plugin>
	           <groupId>org.apache.maven.plugins</groupId>  
                   <artifactId>maven-compiler-plugin</artifactId>  
                   <version>3.5.1</version>  
                   <configuration>
		               <source>1.7</source>  
		               <target>1.7</target>
		               <!-- 解决maven编译时“编码GBK的不可映射字符”的问题 -->
		               <encoding>utf8</encoding>
                   </configuration>  
	        </plugin>	
	        
            <plugin>
		        <groupId>org.apache.maven.plugins</groupId>
		        <artifactId>maven-shade-plugin</artifactId>
		        <version>3.1.0</version>
		        <executions>
		          <execution>
		            <phase>package</phase>
		            <goals>
		              <goal>shade</goal>
		            </goals>
		            <configuration>
		              <transformers>
		                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
		                  <mainClass>package2.LyTestClass</mainClass>
		                </transformer>
		                <!-- 如项目中用到Spring Framework,将依赖打到一个jar包中,运行时会出现读取XML schema文件出错.原因是Spring Framework的多个jar包中包含相同的文件spring.handlers和spring.schemas，如果生成一个jar包会互相覆盖。为了避免互相影响，可以使用AppendingTransformer来对文件内容追加合并 -->
						<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">  
						    <resource>META-INF/spring.handlers</resource>  
						</transformer>  
						<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">  
						    <resource>META-INF/spring.schemas</resource>  
						</transformer>
		              </transformers>
		              <minimizeJar>true</minimizeJar>
		            </configuration>
		          </execution>
		        </executions>     
	        </plugin>
	    </plugins>
	</build>
  
</project>
